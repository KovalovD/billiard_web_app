// resources/js/app.ts
import {createInertiaApp} from '@inertiajs/vue3';
import {resolvePageComponent} from 'laravel-vite-plugin/inertia-helpers';
import {createApp, DefineComponent, h} from 'vue';
import {ZiggyVue} from 'ziggy-js';
import '../css/app.css'; // Tailwind styles
import {Ziggy} from './ziggy';
import {initGlobalLocale} from './composables/useLocale';
import {createPinia} from 'pinia';

// Make route globally available
declare global {
    interface Window {
        route: any;
        Ziggy: any;
    }
}

createInertiaApp({
    title: (title) => `${title} - WinnerBreak`,

    resolve: (name) => resolvePageComponent(`./pages/${name}.vue`, import.meta.glob<DefineComponent>('./pages/**/*.vue')),

    setup({el, App, props, plugin}) {
        // Ensure we have the route data available
        // Merge Ziggy data from backend and potentially frontend overrides
        const ziggyData = {
            ...Ziggy, // From ziggy.js generated by backend
            ...(window.Ziggy || {}), // Potentially overridden/extended by backend script in blade
            // location: window.location.origin, // Use origin instead of full URL for SSR compatibility if needed
        };

        // Create Vue app
        const vueApp = createApp({render: () => h(App, props)});

        // Register global properties
        vueApp.config.globalProperties.route = (name: string, params?: any, absolute?: boolean) => {
            try {
                // Ensure ziggyData contains the necessary structure for routing
                // We directly use the imported Ziggy configuration enhanced with window properties
                return window.route(name, params, absolute, ziggyData);
            } catch (error) {
                console.warn(`Route error generating URL for route name "${name}":`, error);
                console.warn('Available routes in Ziggy config:', ziggyData?.routes ? Object.keys(ziggyData.routes) : 'N/A');
                // Provide basic fallbacks for critical routes
                if (name === 'login') return '/login';
                if (name === 'dashboard') return '/dashboard';
                if (name === 'register') return '/register';
                return '/'; // Fallback to home
            }
        };
        const pinia = createPinia();
        // Apply plugins
        vueApp.use(plugin);
        vueApp.use(pinia);
        vueApp.use(ZiggyVue, ziggyData); // Pass the merged Ziggy config

        // Auth initialization is now handled within useAuth composable,
        // typically called from the main layout component's onMounted hook.

        // Mount the app

        initGlobalLocale().then(() => {
            vueApp.mount(el);
        }).catch((error) => {
            console.error('Failed to initialize locale:', error);
            vueApp.mount(el);
        });

        console.log('[App] Vue App mounted.');
    },

    progress: {
        color: '#4B5563', // Tailwind gray-600
        showSpinner: true,
    },
});
